#!/usr/bin/env python3

import argparse, socket, time, json, select, struct, sys, math, os, random
from replica_util import Status # An enum for follower, candidate, leader
from replica_util import MessageType # An enum for message types
from replica_util import Timeout # Constants for timeout lengths

BROADCAST = "FFFF"

class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.id = id
        self.others = others
        self.status = Status.FOLLOWER
        self.term = 0
        self.database = {}
        self.log = [] # Only committed log entries matter the most - others are expendable and deletable
        self.leader = -1

        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))
        #self.socket.setblocking(False)
        #self.readable = select.select([self.socket], [], [], 0.1)[0]
        print("Replica %s starting up" % self.id, flush=True)
        hello = { "src": self.id, "dst": BROADCAST, "leader": BROADCAST, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)
        #print("returning", flush=True)
        return

    def send(self, message_dict):
        print("Sending message: ", message_dict, flush=True)
        self.socket.sendto(json.dumps(message_dict).encode('utf-8'), ('localhost', self.port))

    # def recv_as_dict(self):
    #     if self.readable:  # Means there is a message to be received
    #         data, addr = self.socket.recvfrom(65535)
    #         print("RECEIVING", data.decode('utf-8'), flush=True)
    #         return json.loads(data.decode('utf-8'))

    def run(self):
        print("Hit run")
        # Changed design to return to here rather moving from run_as_X to run_as_Y as the alternative
        # would consume too much memory with all the local scopes being created and not removed
        while True:
            if self.status == Status.FOLLOWER:
                self.run_as_follower()
            elif self.status == Status.CANDIDATE:
                self.run_as_candidate()
            elif self.status == Status.LEADER:
                self.run_as_leader()

            # data, addr = self.socket.recvfrom(65535)
            # msg = data.decode('utf-8')
            # print("Received message '%s'" % (msg,), flush=True)
            # self.parse_data(data)

    # Followers issue no RPCs, only listen and respond
    # Only accept AppendEntriesRPC if prev. index, term match
    # When accepting AppendEntries - Delete all subsequent entries from log
    def run_as_follower(self):
        print("Running as follower", flush=True)
        random_timeout_delay = (random.random() * Timeout.ELECTION_TIMEOUT_LENGTH) + Timeout.ELECTION_TIMEOUT_MIN  # in ms
        print("Random timeout delay", random_timeout_delay, flush=True)

        # Timeout [0] is current time, [1] is timeout time, using list to have reference that can be mutated within loop
        # Might not be necessary but I'm worried
        election_timeout = [time.perf_counter(), time.perf_counter() + (random_timeout_delay / 1000)]

        # Loop checking for RPC

        while election_timeout[0] < election_timeout[1]:
            readable = select.select([self.socket], [], [], 0.1)
            recv_msg_dict = None
            if readable[0]:
                data, addr = self.socket.recvfrom(65535)
                msg = data.decode('utf-8')
                print("Received message '%s'" % (msg,), flush=True)
                recv_msg_dict = json.loads(msg)
            else:
                #print("No message received", flush=True)
                recv_msg_dict = None
            if recv_msg_dict is None:
                election_timeout[0] = time.perf_counter()
                print("Time: ", election_timeout[0], " Timeout: ", election_timeout[1], flush=True)
                continue
            if recv_msg_dict['type'] == MessageType.REQUEST_VOTE:
                # Check if requester has >= term and index

                this_term = 0
                this_index = 0
                if len(self.log) > 0:
                    this_term = self.log[len(self.log) - 1].term
                    this_index = self.log[len(self.log) - 1].index

                if recv_msg_dict['term'] >= this_term:
                    if recv_msg_dict['index'] >= this_index:
                        # Send vote and become follower? Or wait for confirmation?
                        print("Sending vote to %s" % recv_msg_dict['src'])
                        self.leader = recv_msg_dict['src']
                        self.status = Status.FOLLOWER
                        return

                # Send vote, loop until receiving a new leader msg or timeout and reset as candidate
                print("Extending election timeout", flush=True)
                election_timeout[1] = time.perf_counter() + (random_timeout_delay / 1000)
            elif recv_msg_dict['type'] == MessageType.APPEND_ENTRIES:
                # Reset timeout
                print("Extending election timeout", flush=True)
                election_timeout[1] = time.perf_counter() + (random_timeout_delay / 1000)
                print("todo", flush=True)
                #TODO: Log appending, state change

            # Checks if msg type is get or put and redirects
            self.handle_get_put_follower(recv_msg_dict)
            election_timeout[0] = time.perf_counter()
            print("Time: ", election_timeout[0], " Timeout: ", election_timeout[1], flush=True)

        print("Election Timeout", flush=True)
        # election timeout hit - start an election and become candidate
        self.status = Status.CANDIDATE
        return

        # Should never hit here
        print("WARNING: FOLLOWER %d HIT RETURN UNEXPECTEDLY" % self.id)
        return

    # Note: Deny vote from other server if they have a higher term in log or (equal term and higher log index)
    # Server with lower index can still win - remember to look at log
    def run_as_candidate(self):
        print("running as candidate", flush=True)
        readable = select.select([self.socket], [], [], 0.1)
        self.term += 1
        random_timeout_delay = (random.random() * Timeout.ELECTION_TIMEOUT_LENGTH) + Timeout.ELECTION_TIMEOUT_MIN  # in ms
        # send request vote RPCs, have new election timeout, wait for >n/2 votes or a new leader msg
        votes = 1

        # Form and send request vote RPC
        if len(self.log) == 0:
            msg_dict = {'src': self.id, 'dst': BROADCAST,
                        'leader': "FFFF",
                        'type': MessageType.REQUEST_VOTE,
                        'term': 0, 'id': self.id, 'index': 0} # Use term variable or term stored in log?
        else:
            msg_dict = {'src': self.id, 'dst': BROADCAST,
                        'leader': "FFFF",
                        'type': MessageType.REQUEST_VOTE,
                        'id': self.id, 'term': self.log[len(self.log)].term, 'index': self.log[len(self.log)].index}
        self.send(msg_dict)

        # Loop while collecting votes
        election_end_time = [time.perf_counter() + (random_timeout_delay/1000)]
        while time.perf_counter() < election_end_time[0]:
            if readable[0]:
                data, addr = self.socket.recvfrom(65535)
                msg = data.decode('utf-8')
                print("Received message '%s'" % (msg,), flush=True)
                recv_msg_dict = json.loads(msg)

                votes = self.parse_msg_as_candidate(recv_msg_dict, votes)
                if votes >= ((len(self.others) + 1) / 2) + 1:
                    self.status = Status.LEADER
                    return
                if recv_msg_dict['type'] == MessageType.APPEND_ENTRIES:
                    # Compare term and log
                    this_term, this_index = self.get_this_term_this_index()
                    if recv_msg_dict['term'] >= this_term and recv_msg_dict['index'] >= this_index:
                        print("Found leader as candidate", flush=True)
                        self.leader = recv_msg_dict['src']
                        self.status = Status.FOLLOWER
                        return

                elif recv_msg_dict['type'] == MessageType.REQUEST_VOTE:
                    print("Requested for vote, doing nothing", flush=True)



        #TODO: Send fail responses so clients retry during this phase?

        # If timeout - restart election as candidate
        print("Candidate Timeout", flush=True)
        self.status = Status.CANDIDATE
        return

    # As a new leader - just start normal operation, leader's log is 'truth'
    # A leader never overrides its own log - only appends
    # Leader decides an entry is committed if in majority of logs - ALSO at least one new entry from leader's term is
    # replicated to other logs before committing OLD logs that are in the majority
    #
    # Replicating log to followers:
    # Find the latest point that matches - fill in from there - delete any extraneous entries, fill in missing
    # Keep a nextIndex for each follower - start at leader's latest index + 1
    #   - decrement each time AppendEntries consistency check fails
    def run_as_leader(self):
        print(self.id, " running as LEADER", flush=True)
        self.leader = self.id
        readable = select.select([self.socket], [], [], 0.01)

        heartbeat_time = [time.perf_counter() + (Timeout.HEARTBEAT/1000)]  # Allows it to be a reference
        while True:

            # Broadcast heartbeat every HEARTBEAT time that elapses
            if time.perf_counter() > heartbeat_time[0]:
                heartbeat_dict = {'src': self.id, 'dst': BROADCAST, 'leader': self.leader,
                                  'type': MessageType.APPEND_ENTRIES,
                                  'term': 0, 'index': 0, 'mid': 0, 'key': 0, 'value': 0}
                self.send(heartbeat_dict)
                heartbeat_time[0] = time.perf_counter() + (Timeout.HEARTBEAT/1000)

            if readable[0]:
                data, addr = self.socket.recvfrom(65535)
                msg = data.decode('utf-8')
                print("Received message '%s'" % (msg,), flush=True)
                recv_msg_dict = json.loads(msg)
                if recv_msg_dict['type'] == MessageType.GET:
                    self.get_from_database(recv_msg_dict)
                elif recv_msg_dict['type'] == MessageType.PUT:
                    # Handling a PUT: Get majority to be ready to commit - then commit
                    # After: May need to add condition that
                    temp_reply_dict = {'src': self.id, 'dst': recv_msg_dict['src'], 'leader': self.leader,
                                       'type': MessageType.FAIL, 'mid': recv_msg_dict['MID']}
                    self.send(temp_reply_dict)


        # Should never hit here
        print("WARNING: LEADER %d HIT RETURN" % self.id)
        return

    # Redirect any gets or puts as a follower
    def handle_get_put_follower(self, received_msg_dict):
        if received_msg_dict['type'] == MessageType.GET or received_msg_dict['type'] == MessageType.PUT:
            #needs src, dst, leader, type, mid
            src = self.id
            print("msg src = ", received_msg_dict['dst'], "id = ", self.id)
            dst = received_msg_dict['src']
            msg_type = MessageType.REDIRECT
            leader = self.leader
            mid = received_msg_dict['MID']
            msg_dict_to_send = {'src': src, 'dst': dst, 'leader': leader, 'type': msg_type, }
            self.send(msg_dict_to_send)
        return

    def parse_msg_as_candidate(self, recv_msg_dict, votes):
        if recv_msg_dict['type'] == MessageType.VOTE_GRANTED:
            votes += 1
        return votes

    def get_from_database(self, recv_msg_dict):
        # Values for return message
        mid = recv_msg_dict['MID']
        src = self.id
        dst = recv_msg_dict['src']
        leader = self.leader
        msg_type = MessageType.OK
        key = recv_msg_dict['key']
        if key in self.database:
            value = self.database[key]
        else:
            value = ""
        send_msg_dict = {'MID': mid, 'src': src, 'dst': dst, 'leader': leader, 'type': msg_type, 'value': value}
        self.send(send_msg_dict)

    def get_this_term_this_index(self):
        this_term = 0
        this_index = 0
        if len(self.log) > 0:
            this_term = self.log[len(self.log) - 1].term
            this_index = self.log[len(self.log) - 1].index
        return this_term, this_index


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
